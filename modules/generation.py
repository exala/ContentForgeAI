# File: /content_automation/content_system/generation.py

import os
import google.generativeai as genai
import time
from dotenv import load_dotenv

load_dotenv()  # take environment variables

# --- Configuration ---
# Load the API key from an environment variable for security
API_KEY = os.getenv("GOOGLE_API_KEY")
if not API_KEY:
    raise ValueError("API key not found. Please set the GOOGLE_API_KEY environment variable.")

# Configure the generative AI client
genai.configure(api_key=API_KEY)

# Define the model to use
# MODEL_NAME = "gemini-2.5-pro"
MODEL_NAME = os.getenv("MODEL_NAME")

def prompt_orchestrator(topic: str) -> str:
    """Builds a detailed and effective prompt for the LLM."""
    prompt = f"""
    You are an expert content creator and SEO specialist.
    Your task is to generate a high-quality, comprehensive article about the given topic.

    Topic: "{topic}"

    Requirements:
    - Write an engaging, informative article that provides real value to readers
    - Use clear, hierarchical structure with H1, H2 and H3 headers
    - Include a compelling introduction that hooks the reader
    - Add a strong conclusion with a call-to-action
    - Maintain a professional yet engaging tone throughout
    - Target length: 800-1,200 words
    - Use HTML formatting for structure (<h2>, <h3>, <p>, <ul>, <li>, etc.)
    - Include relevant keywords naturally without keyword stuffing
    - Provide actionable insights and practical advice
    - Use examples and specific details where appropriate
    - Ensure content is original and not generic
    - Only include the body and not the whole html document. Do not include any markdown or other formatting like backticks etc.
    
    Structure Guidelines:
    1. Start with an engaging introduction (1-2 paragraphs)
    2. Use 3-5 main sections with H2 headers
    3. Include subsections with H3 headers where needed
    4. Add bullet points or numbered lists for easy scanning
    5. End with a strong conclusion and call-to-action
    
    Do not mention AI, artificial intelligence, or that this content was generated by a bot.
    Write as if you are a knowledgeable expert in the field.
    """
    return prompt

# --- NEW ASYNC GENERATION FUNCTION ---
async def generate_content_async(prompt: str, topic: str) -> str:
    """
    Sends the prompt to the Gemini API asynchronously and returns the raw text.
    """
    print(f"   [Async] Sending request for: '{topic}'")
    try:
        model = genai.GenerativeModel(MODEL_NAME)
        # Use the asynchronous version of the function
        time.sleep(4)
        response = await model.generate_content_async(prompt)
        print(f"   [Async] Received response for: '{topic}'")
        return response.text
    except Exception as e:
        print(f"An error occurred during async generation for '{topic}': {e}")
        return "" # Return empty string on failure to not break the whole batch

# --- OLD SYNC GENERATION FUNCTION (Either use this one or the previous one in main) ---
def generate_content(prompt: str) -> str:
    """Sends the prompt to the Gemini API and returns the raw text response."""
    try:
        model = genai.GenerativeModel(MODEL_NAME)
        time.sleep(4)
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        print(f"An error occurred during content generation: {e}")
        return ""